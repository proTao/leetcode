from pprint import pprint as print
from collections import Counter

class Solution:
    def findMaxForm(self, strs, m, n):
        """
        :type strs: List[str]
        :type m: int of 0
        :type n: int of 1
        :rtype: int
        """
        def count01(s):
            l = len(s)
            _0 = s.count("0")
            return (_0, l - _0)

        prices = [count01(i) for i in strs]
        prices = Counter(prices)
        print(prices)

        # dp iniitial
        dp = [[0] * (n+1) for i in range(m+1)]
        

        def zeroOnePack2D(c0, c1, w=1):
            for i in range(m, c0-1, -1):
                for j in range(n, c1-1, -1):
                    dp[i][j] = max(dp[i][j], dp[i-c0][j-c1] + w)

        def completePack2D(c0, c1, w=1):
            for i in range(c0, m+1):
                for j in range(c1, n+1):
                    dp[i][j] = max(dp[i][j], dp[i-c0][j-c1] + w)

        def multiplePack2D(c0, c1, max_buy, w=1):
            if c0 * max_buy >= m and c1 * max_buy >= n:
                print("case1")
                completePack2D(c0, c1, w)
            else:
                print("case2")
                k = 1
                while k < max_buy:
                    print([k,(c0,c1)])
                    zeroOnePack2D(k * c0, k * c1, w)
                    max_buy = max_buy - k
                    k *= 2
                if max_buy > 0:
                    print([max_buy,(c0,c1)])
                    zeroOnePack2D(c0*max_buy, c1*max_buy, w)
            print(dp)

        for c, max_buy in prices.items():
            multiplePack2D(c[0], c[1], max_buy)
        return dp[-1][-1]

    def naiveFindMaxForm(self, strs, m, n):
        """
        :type strs: List[str]
        :type m: int of 0
        :type n: int of 1
        :rtype: int
        """
        def count01(s):
            l = len(s)
            _0 = s.count("0")
            return (_0, l - _0)

        prices = [count01(i) for i in strs]

        # dp iniitial
        dp = [[0] * (n+1) for i in range(m+1)]

        # naive multiple Pack Problem
        # print(dp)

        
        for item in prices:
            # print(item)
            for i in range(m, item[0]-1, -1):
                for j in range(n, item[1]-1, -1):
                    dp[i][j] = max(dp[i][j], dp[i-item[0]][j-item[1]] + 1)
            print(dp)
            print(item)
        return dp[-1][-1]

ss=["1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101"]
m=100
n=100

# ss=["10", "0001", "111001", "1", "0"]
# m=5
# n=3
ss=["0","0","0","1","1"]
m=4
n=4

print(Solution().findMaxForm(ss, m,n))
print(Solution().naiveFindMaxForm(ss, m,n))
